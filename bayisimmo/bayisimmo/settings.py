"""
Django settings for bayisimmo project.

Generated by 'django-admin startproject' using Django 4.2.16.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

load_dotenv(os.path.join(BASE_DIR, ".env"))
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY")



# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'
if DEBUG:
    ALLOWED_HOSTS = ["*"]
else:
    ALLOWED_HOSTS = ["www.bayisimmob.com","bayisimmob.com","ec2-3-134-235-152.us-east-2.compute.amazonaws.com","127.0.0.1","3.134.235.152"]

LYGOS_API_KEY=os.getenv("LYGOS_API_KEY")
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    #package applications
    'rest_framework',
    'rest_framework_simplejwt',
    'djoser',
    'corsheaders',
    'drf_spectacular',
    #'phonenumber_field',

    #installed app
    'authentification',
    'annonce',

    #pour s3
    "storages",
    'oauth2_provider',
    # 'social_django', 
    # 'rest_framework_social_oauth2',  
    
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'social_django.middleware.SocialAuthExceptionMiddleware',
]

ROOT_URLCONF = 'bayisimmo.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'social_django.context_processors.backends',  
                'social_django.context_processors.login_redirect',
            ],
        },
    },
]

AUTHENTICATION_BACKENDS = (
    'social_core.backends.google.GoogleOAuth2', 
    #'rest_framework_social_oauth2.backends.DjangoOAuth2',
    'django.contrib.auth.backends.ModelBackend',  
    
)

DRFSO2_URL_NAMESPACE = 'oauth2_provider'
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = os.getenv("GOOGLE_CLIENT_ID")
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = os.getenv("GOOGLE_SECRET_ID")


# Les scopes demandés à Google
SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = ['email', 'profile']

# Configuration de la redirection
if DEBUG:
    SOCIAL_AUTH_LOGIN_REDIRECT_URL = 'http://localhost:5173'  
else:
    SOCIAL_AUTH_LOGIN_REDIRECT_URL = 'https://bayisimmob.com' 
SOCIAL_AUTH_URL_NAMESPACE = 'social'

SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.social_user',
    'social_core.pipeline.user.get_username',
    'social_core.pipeline.social_auth.associate_by_email',
    'social_core.pipeline.user.create_user',
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details',
)



WSGI_APPLICATION = 'bayisimmo.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
if DEBUG:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
else:

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv("DB_NAME"),
            'USER': os.getenv("DB_USER"),
            'PASSWORD': os.getenv("DB_PASSWORD"),
            'HOST': os.getenv("DB_HOST"),
            'PORT': os.getenv("DB_PORT"),
            'CONN_MAX_AGE': 0,  
            'OPTIONS': {
                'connect_timeout': 5,
            }
        }
    }

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL="authentification.User"

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/



# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


REST_FRAMEWORK={
    'DEFAULT_AUTHENTICATION_CLASSES':[
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.MultiPartParser', 
        'rest_framework.parsers.FormParser',       
    ],
}

if DEBUG:
    SOCIAL_AUTH_GOOGLE_OAUTH2_REDIRECT_URI = 'http://localhost:8000/auth/o/google-oauth2/'
else:
    SOCIAL_AUTH_GOOGLE_OAUTH2_REDIRECT_URI = 'https://bayisimmob.com/auth/o/google-oauth2/'

print(SOCIAL_AUTH_GOOGLE_OAUTH2_REDIRECT_URI) 

DJOSER={
    'SOCIAL_AUTH_ALLOWED_REDIRECT_URIS': [
        SOCIAL_AUTH_GOOGLE_OAUTH2_REDIRECT_URI
    ],
    'LOGIN_FIELD':'email',
    'SERIALIZERS': {
        'user_create': 'authentification.serializers.UserRegistrationSerializer',
        'user': 'authentification.serializers.UserSerializer',
        'user_update': 'authentification.serializers.UserUpdateSerializer',
    },
    'PASSWORD_RESET_CONFIRM_URL': 'reset-password?uid={uid}&token={token}',
    'USERNAME_RESET_CONFIRM_URL': 'username/reset/confirm/{uid}/{token}',
    'ACTIVATION_URL': 'activate/{uid}/{token}',
    'DOMAIN': os.getenv("DOMAIN","bayisimmob.com"),
    'PERMISSIONS': {
        'user_list': ['rest_framework.permissions.IsAdminUser'],  
        'user': ['rest_framework.permissions.IsAuthenticated'],
    },
    # 'SOCIAL_AUTH_ALLOWED_REDIRECT_URIS': ['https://bayisimmob.com','http://localhost:5173','https://bayisimmob.com/complete/google-oauth2/'],
    

    'SOCIAL_AUTH_TOKEN_STRATEGY': 'djoser.social.token.jwt.TokenStrategy',
}

SIMPLE_JWT={
    'ACCESS_TOKEN_LIFETIME':timedelta(days=7),
    'REFRESH_TOKEN_LIFETIME':timedelta(days=14),
    'ROTATE_REFRESH_TOKEN':True,
    'BLACKLIST_AFTER_ROTATION':True
}

if DEBUG:
    CORS_ALLOW_ALL_ORIGINS = True

else:
    CORS_ALLOWED_ORIGINS = [
    "https://bayisimmob.com",  
    "https://www.bayisimmob.com",
    ]

APPEND_SLASH = True
CORS_ALLOW_METHODS = [
    'GET',
    'POST',
    'PUT',
    'PATCH',
    'DELETE',
    'OPTIONS',
]

CORS_ALLOW_CREDENTIALS = True

if DEBUG:
    CSRF_TRUSTED_ORIGINS=[
        "http://192.168.1.108:5173",  
        "https://0e88-41-202-220-2.ngrok-free.app",
        "http://localhost:5173"
    ]
else:
    CSRF_TRUSTED_ORIGINS=[
        "https://bayisimmob.com",  
        "https://www.bayisimmob.com",
    ]

SPECTACULAR_SETTINGS = {
    'TITLE': 'Mon API',
    'DESCRIPTION': 'Documentation détaillée de mon API.',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,  
}



EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'  
EMAIL_PORT = 587  
EMAIL_USE_TLS = True  
EMAIL_HOST_USER = os.getenv('EMAIL')  
EMAIL_HOST_PASSWORD = os.getenv('PASSWORD')  
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER  

# STORAGES = {
#     "default": {  # Pour les fichiers média (FileField, ImageField)
#         "BACKEND": "storages.backends.s3.S3Storage",
#         "OPTIONS": {
#             "access_key": os.getenv('AWS_ACCESS_KEY_ID'),
#             "secret_key": os.getenv('AWS_SECRET_ACCESS_KEY'),
#             "bucket_name": os.getenv('AWS_STORAGE_BUCKET_NAME'),
#             "region_name": os.getenv('AWS_S3_REGION_NAME'),
#             "default_acl": "public-read",
#             "file_overwrite": False,
#             "location": "media",
#             "querystring_auth": False,
#             "custom_domain": f"{os.getenv('AWS_STORAGE_BUCKET_NAME')}.s3.amazonaws.com",
#         },
#     },
#     "staticfiles": {  # Pour les fichiers statiques (collectstatic)
#         "BACKEND": "storages.backends.s3.S3Storage",
#         "OPTIONS": {
#             "access_key": os.getenv('AWS_ACCESS_KEY_ID'),
#             "secret_key": os.getenv('AWS_SECRET_ACCESS_KEY'),
#             "bucket_name": os.getenv('AWS_STORAGE_BUCKET_NAME'),
#             "region_name": os.getenv('AWS_S3_REGION_NAME'),
#             "default_acl": "public-read",
#             "location": "static",
#             "querystring_auth": False,
#             "custom_domain": f"{os.getenv('AWS_STORAGE_BUCKET_NAME')}.s3.amazonaws.com",
#         },
#     },
# }


if DEBUG:
    STATIC_URL = 'static/'
    MEDIA_URL='media/'
    MEDIA_ROOT= BASE_DIR / 'media'
else:
    # AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')
    # AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')
    AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME')
    # AWS_S3_REGION_NAME = os.getenv('AWS_S3_REGION_NAME')
    # AWS_S3_FILE_OVERWRITE = False
    # AWS_DEFAULT_ACL = 'public-read'
    # AWS_S3_SIGNATURE_VERSION = 's3v4'
    AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
    AWS_LOCATION = 'static'

    STATICFILES_STORAGE = 'bayisimmo.storages.StaticStorage'
    DEFAULT_FILE_STORAGE = 'bayisimmo.storages.MediaStorage'

    STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{AWS_LOCATION}/'
    MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/media/'
    AWS_DEFAULT_ACL = None  # Désactive totalement l’ajout d’ACL
    AWS_S3_OBJECT_PARAMETERS = {}
    STORAGES = {
        "default": {  # Pour les fichiers média (FileField, ImageField)
            "BACKEND": "storages.backends.s3.S3Storage",
            "OPTIONS": {
                "access_key": os.getenv('AWS_ACCESS_KEY_ID'),
                "secret_key": os.getenv('AWS_SECRET_ACCESS_KEY'),
                "bucket_name": os.getenv('AWS_STORAGE_BUCKET_NAME'),
                "region_name": os.getenv('AWS_S3_REGION_NAME'),
                #"default_acl": "none",
                "file_overwrite": False,
                "location": "media",
                "querystring_auth": False,
                "custom_domain": f"{os.getenv('AWS_STORAGE_BUCKET_NAME')}.s3.amazonaws.com",
            },
        },
        "staticfiles": {  # Pour les fichiers statiques (collectstatic)
            "BACKEND": "storages.backends.s3.S3Storage",
            "OPTIONS": {
                "access_key": os.getenv('AWS_ACCESS_KEY_ID'),
                "secret_key": os.getenv('AWS_SECRET_ACCESS_KEY'),
                "bucket_name": os.getenv('AWS_STORAGE_BUCKET_NAME'),
                "region_name": os.getenv('AWS_S3_REGION_NAME'),
                #"default_acl": "none",
                "location": "static",
                "querystring_auth": False,
                "custom_domain": f"{os.getenv('AWS_STORAGE_BUCKET_NAME')}.s3.amazonaws.com",
            },
        },
    }


STATIC_ROOT=BASE_DIR / 'staticfiles'

if not DEBUG:
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True

    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'simple': {
                'format': '[{levelname}] {asctime} {message}',
                'style': '{',
            },
        },
        'handlers': {
            'file': {
                'level': 'ERROR',
                'class': 'logging.FileHandler',
                'filename': BASE_DIR / 'django_error.log',
            },
            'console': {
                'level': 'DEBUG',
                'class': 'logging.StreamHandler',
                'formatter': 'simple',
            },
        },
        'loggers': {
            'django': {
                'handlers': ['file'],
                'level': 'ERROR',
                'propagate': True,
            },
            'storages': {'level': 'DEBUG', 'handlers': ['console']},
            'annonce': {
                'handlers': ['file'],
                'level': 'ERROR',
                'propagate': False,
            },
        },
    }
